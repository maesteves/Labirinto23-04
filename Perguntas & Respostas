1) Como o algoritmo de busca em largura funciona? Por que ele é eficaz para encontrar o caminho mais curto em um labirinto?
      O algoritmo de busca em largura explora todos os nós próximos antes de avançar para os próximos níveis. Ele usa uma fila para guardar os nós a serem explorados e adiciona todos os vizinhos não visitados de um nó à fila. Este processo continua até que a fila esteja vazia ou o destino seja encontrado. Este método é eficaz para encontrar o caminho mais curto em um labirinto, pois garante que o primeiro caminho encontrado para o destino seja o mais curto.

2) Quais são as limitações do algoritmo de busca em largura? Existem situações em que ele não encontraria o caminho mais curto?
  As limitaçõesdo Algoritmo de busca de largura pode apresentar limitações como por exemplo, ela não funciona bem quando há pesos nas arestas, pois não leva em consideração o custo para se mover de um nó para outro. Nesse caso, o algoritmo pode não encontrar o caminho mais curto. Além disso, a busca em largura pode ser ineficiente em termos de espaço, pois mantém todos os nós na memória.

3) Como você poderia modificar o algoritmo para lidar com labirintos mais complexos, como aqueles com pesos nas arestas ou múltiplos pontos de fim?
  Para lidar com labirintos mais complexos que têm pesos nas arestas, você pode usar o algoritmo de Dijkstra, que é uma variação da busca em largura que leva em consideração os pesos das arestas. Para labirintos com múltiplos pontos de fim, você pode modificar o algoritmo para continuar a busca mesmo após encontrar o primeiro ponto final. Isso permitirá que o algoritmo encontre todos os pontos finais. Além disso, você pode manter um registro do caminho mais curto para cada ponto final encontrado e retornar o mais curto desses caminhos.
